import net.darkhax.curseforgegradle.TaskPublishCurseForge

import javax.net.ssl.HttpsURLConnection
import java.nio.charset.StandardCharsets

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'idea'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
    mavenLocal()
    maven {
        name = "CurseMaven"
        url = uri("https://www.cursemaven.com")
    }
    maven {
        name = "JEI"
        url = uri("https://maven.blamejared.com/")
    }
    maven {
        name = "EMI"
        url = uri("https://maven.terraformersmc.com/")
    }
    maven {
        name = "REI"
        url = uri("https://maven.shedaniel.me/")
    }
}

base {
    archivesName = "${mod_id}-neoforge"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withSourcesJar()
}

neoForge {
    version = project.neoforge_version
    addModdingDependenciesTo sourceSets.test

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        clientData {
            clientData()
            programArguments.addAll '--mod', "curiostest", '--all', '--output', file('src/generated/test/resources/').getAbsolutePath(), '--existing', file('src/test/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }

        "curiostest" {
            sourceSet sourceSets.test
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/main/resources' }
sourceSets.test.resources { srcDir 'src/generated/test/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    include 'top/theillusivec4/curios/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

sourcesJar {
    from(rootProject.file("LICENSE"))
    from(rootProject.file("COPYING"))
    from(rootProject.file("COPYING.LESSER"))
    from(rootProject.file("README.md"))
    from(rootProject.file("CHANGELOG.md"))
}

jar {
    from(rootProject.file("LICENSE"))
    from(rootProject.file("COPYING"))
    from(rootProject.file("COPYING.LESSER"))
    from(rootProject.file("README.md"))
    from(rootProject.file("CHANGELOG.md"))
}

artifacts {
    archives apiJar
}

dependencies {
    compileOnly "mezz.jei:jei-1.21-neoforge-api:${jei_version}"
//    localRuntime "mezz.jei:jei-1.21-neoforge:${jei_version}"

    compileOnly "dev.emi:emi-neoforge:${emi_version}"
//    localRuntime "dev.emi:emi-neoforge:${emi_version}"

    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}"
//    localRuntime "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neoforge_version       : neoforge_version,
            neoforge_version_range : neoforge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            license                : license,
            issues_url             : issues_url,
            version                : version,
            mod_author             : mod_author,
            mod_description        : mod_description,
            sources_url            : sources_url
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

def publishDiscord() {
    try {
        def cfLinks = new StringJoiner('\\n')

        if (project.hasProperty('curse_link')) {
            cfLinks.add("[Download](${project.findProperty('curse_link')})")
        }
        def modrinthLinks = new StringJoiner('\\n')

        if (project.hasProperty('modrinth_link')) {
            modrinthLinks.add("[Download](${project.findProperty('modrinth_link')})")
        }
        println(cfLinks)
        println(modrinthLinks)
        def changelog = file("CHANGELOG_LATEST.md").getText()
        changelog = changelog.substring(changelog.indexOf("##"))
        changelog = changelog.replaceAll("\n","\\\\n")

        if (changelog.length() >= 1024) {
            changelog = changelog.substring(0, 900)
            changelog = changelog + "...[(See more)](${changelog_link})"
        }
        println(changelog)
        int color = 65392

        if (release_type == "beta") {
            color = 16763904
        } else if (release_type == "alpha") {
            color = 16724273
        }
        final String message = """
            {
              "embeds": [
                {
                  "title": "${mod_name} ${version}",
                  "color": ${color},
                  "fields": [
                    {
                      "name": "Minecraft Versions",
                      "value": "${release_versions.replaceAll(",", ", ")}"
                    },
                    {
                      "name": "CurseForge",
                      "value": "${cfLinks}",
                      "inline": true
                    },
                    {
                      "name": "Modrinth",
                      "value": "${modrinthLinks}",
                      "inline": true
                    },
                    {
                      "name": "Changelog",
                      "value": "${changelog}"
                    }
                  ],
                  "thumbnail": {
                    "url": "${discord_thumbnail}"
                  }
                }
              ]
            }
            """
        println(message)
        final URL url = URI.create("${System.getenv('DISCORD_WEBHOOK')}").toURL()
        final HttpsURLConnection connection = (HttpsURLConnection) url.openConnection()
        connection.addRequestProperty("Content-Type", "application/json; charset=UTF-8")
        connection.addRequestProperty("User-Agent", "${mod_name} Gradle Upload")
        connection.setDoOutput(true)
        connection.setRequestMethod("POST")
        connection.connect()

        try (OutputStream out = connection.getOutputStream()) {
            out.write(message.getBytes(StandardCharsets.UTF_8))
        }
        connection.getInputStream().close()
        connection.disconnect()
    } catch (IOException e) {
        e.printStackTrace()
    }
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = "${System.getenv('CURSEFORGE_KEY')}"
    //debugMode = true
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('CHANGELOG_LATEST.md')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addModLoader("NeoForge")
    mainFile.withAdditionalFile(sourcesJar)
    mainFile.withAdditionalFile(apiJar)

    doLast {

        if (project.hasProperty('cf_page') && mainFile.curseFileId != null) {
            project.ext.curse_link = "${cf_page}/files/${mainFile.curseFileId}"
        }
    }
}

modrinth {
    token = "${System.getenv('MODRINTH_KEY')}" ?: ""
    //debugMode = true
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('CHANGELOG_LATEST.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    additionalFiles = [sourcesJar, apiJar]
    loaders = ["neoforge"]
    gameVersions = "${release_versions}".split(",") as List<String>
}

tasks.modrinth.doLast {

    if (project.hasProperty('modrinth_page') && tasks.modrinth.newVersion != null) {
        project.ext.modrinth_link = "${modrinth_page}/version/${tasks.modrinth.newVersion.id}"
    }
}

tasks.register('publishMod') {
    dependsOn ordered('publish', 'modrinth', 'publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publishing {

    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            artifact jar
            artifact apiJar
        }
    }

    repositories {
        maven {
            url = "${System.getenv('MAVEN_URL')}"
            credentials {
                username = "${System.getenv('MAVEN_USER')}"
                password = "${System.getenv('MAVEN_PASSWORD')}"
            }
        }
    }
}
